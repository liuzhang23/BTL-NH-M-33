# BTL-QuanLySinhVien-Nhom33

#include<conio.h>
#include <iostream>
#include <string>

using namespace std;

class Person{
	private:
		string Name, Date, Address, Sex;
	public:
		Person();
		~Person();
		string getName();
		virtual void Inputs();
		virtual void Outputs();
		virtual void Add();
		virtual void Search();
		virtual void Sort();
		virtual void Delete();
};
Person::Person(){
	Name = "";
	Date = "";
	Address = "";
	Sex = "";
}
Person::~Person(){
	Name = "";
	Date = "";
	Address = "";
	Sex = "";
}
string Person::getName(){
	return Name;
}
void Person::Inputs(){
	cout<<"\tName: "; fflush(stdin); getline(cin,Name);
	cout<<"\tSex: "; fflush(stdin); getline(cin,Sex);
	cout<<"\tDate: "; fflush(stdin); getline(cin,Date);
	cout<<"\tAddress: ";fflush(stdin); getline(cin,Address);
	
}
void Person::Outputs(){
	cout<<"\t\t"<<Name<<"\t\t"<<Sex<<"\t\t"<<Date<<"\t\t"<<Address<<"\t\t";
}
void Person::Add(){
}
void Person::Delete(){
}
void Person::Search(){
}
void Person::Sort(){
}
class Student:public Person{
	private:
		Student *STD;
		string Code, Class;
		float Score;
		int NumberStudents, Size;
	public:
		Student();
		Student(int m);
		~Student();
		string getCode();
		float getScore();
		string getClass();
		void InputStudent();
		void Inputs();
		void Output();
		void Outputs();
		void Search();
		void Sort();
		void Add();
		void Delete();
};
Student::Student(){
	STD = NULL;
	NumberStudents = 0;
	Code = "";
	Class = "";
	Score = 0;
	Size = 0;
}
Student::Student(int m){
	STD = new Student [m];
	NumberStudents = 0;
	Code = "";
	Class = "";
	Score = 0;
	Size = 0;
}
Student::~Student(){
	delete [] STD;
	NumberStudents = 0;
	Code = "";
	Class = "";
	Score = 0;
	Size = 0;
}
string Student::getCode(){
	return Code;
}
float Student::getScore(){
	return Score;
}
string Student::getClass(){
	return Class;
}
void Student::InputStudent(){
	Person::Inputs();
	cout<<"\tCode: "; fflush(stdin); getline(cin,Code);
	cout<<"\tClass: "; fflush(stdin); getline(cin,Class);
	cout<<"\tmedium score: "; cin>>Score;
}
void Student::Inputs(){
	cout<<"Enter the number of students: "; cin>>NumberStudents;
	cout<<endl;
	STD = new Student [NumberStudents];
	for(int i=0; i<NumberStudents; i++){
		cout<<"\n\tEnter information of student "<<i+1<<":"<<endl;
		STD[i].InputStudent();
		Size++;
	}
}
void Student::Output(){
	Person::Outputs();
	cout<<Code<<"\t\t"<<Class<<"\t\t"<<Score<<"\t\t";
}
void Student::Outputs(){
	cout<<"\tSTT"<<"\t\tName"<<"\t\tSex"<<"\t\tDate"<<"\t\tAddress"<<"\t\tCode"<<"\t\tClass"<<"\t\tScore"<<endl;
	for(int i=0; i<Size; i++){
		cout<<"\t"<<i+1;
		STD[i].Output();
		cout<<endl;
	}
}
void Student::Search(){
	cout<<"\n\t\t\t\t********************************************";
   	cout<<"\n\t\t\t\t**           FUNCTION SEARCH              **";
  	cout<<"\n\t\t\t\t**                                        **";
  	cout<<"\n\t\t\t\t**  1. By name                            **";
    cout<<"\n\t\t\t\t**  2. By code                            **";
	cout<<"\n\t\t\t\t**                                        **";
    cout<<"\n\t\t\t\t********************************************";
	int chooseSearch;
	string Find1, Find2;
	cout<<"\n\tEnter your selection: "; cin>>chooseSearch;
	switch(chooseSearch){
	case 1:
		cout<<"\nYou have selected the search function by name...\n"<<endl;
		cout<<"\n\tEnter name of student: "; fflush(stdin); getline (cin,Find1);
		cout<<"\n\t___Student found___\n"<<endl;
    	cout<<"\tSTT"<<"\t\tName"<<"\t\tSex"<<"\t\tDate"<<"\t\tAddress"<<"\t\tCode"<<"\t\tClass"<<"\t\tScore"<<endl;
    	for (int i=0; i<Size; i++){
   			if (Find1 == STD[i].getName()){
				cout<<"\t"<<i+1;
				STD[i].Output();
				cout<<endl;
			}
		}
		break;
							
	case 2:
		cout<<"\nYou have selected the search function by code...\n"<<endl;
		cout<<"\n\tEnter code of student: "; fflush(stdin); getline (cin,Find2);
		cout<<"\n\t___Student found___\n"<<endl;
		cout<<"\tSTT"<<"\t\tName"<<"\t\tSex"<<"\t\tDate"<<"\t\tAddress"<<"\t\tCode"<<"\t\tClass"<<"\t\tScore"<<endl;
		for (int i=0; i<Size; i++){
    		if (Find2 == STD[i].getCode()){
				cout<<"\t"<<i+1;
				STD[i].Output();
				cout<<endl;
			}
		}
		break;
	default:
		cout<<"\nThis function is not available! Please choose again!!!"<<endl;
		break;
	}
}
void Student::Sort(){
	cout<<"\n\t\t\t\t********************************************";
   	cout<<"\n\t\t\t\t**           FUNCTION SORT                **";
  	cout<<"\n\t\t\t\t**                                        **";
	cout<<"\n\t\t\t\t**  1. By name                            **";
	cout<<"\n\t\t\t\t**  2. By code                            **";
	cout<<"\n\t\t\t\t**  3. by medium score                    **";
	cout<<"\n\t\t\t\t**                                        **";
    cout<<"\n\t\t\t\t********************************************";
	int chooseSort;
	cout<<"\n\tEnter your selection: "; cin>>chooseSort;
	switch(chooseSort){		
		case 1:
			cout<<"\nYou have selected the function to sort by name...\n"<<endl;
			cout<<"\n\t\t\t\t********************************************";
   			cout<<"\n\t\t\t\t**               TYPE SORT                **";
  			cout<<"\n\t\t\t\t**                                        **";
	  		cout<<"\n\t\t\t\t**       1. A - Z                         **";
	  		cout<<"\n\t\t\t\t**       2. Z - A                         **";
	  		cout<<"\n\t\t\t\t**                                        **";
      		cout<<"\n\t\t\t\t********************************************";
      		int TypeSort;
      		cout<<"\n\tEnter your selection: "; cin>>TypeSort; cout<<endl;
			switch(TypeSort){
				case 1:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getName() > STD[j].getName()){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
							}
						}
					}
					Student::Outputs();
					break;
				case 2:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getName() < STD[j].getName()){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
							}
						}
					}
					Student::Outputs();
					break;
				default:
					cout<<"\nThis program is not available!!!"<<endl;
					break;
			}
			cout<<"\nPress any key to return to the menu...\n";
			getch();
			break;			
		case 2:
			cout<<"\nYou have selected the function to sort by code...\n"<<endl;
			cout<<"\n\t\t\t\t********************************************";
   			cout<<"\n\t\t\t\t**               TYPE SORT                **";
  			cout<<"\n\t\t\t\t**                                        **";
	  		cout<<"\n\t\t\t\t**       1. A - Z                         **";
	  		cout<<"\n\t\t\t\t**       2. Z - A                         **";
	  		cout<<"\n\t\t\t\t**                                        **";
      		cout<<"\n\t\t\t\t********************************************";
      		int TypeSort2;
      		cout<<"\n\tEnter your selection: "; cin>>TypeSort2; cout<<endl;
			switch(TypeSort2){
				case 1:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getCode() > STD[j].getCode()){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
    							cout<<endl;
							}
						}
					}
					Student::Outputs();
					break;
				case 2:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getCode() < STD[j].getCode()){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
    							cout<<endl;
							}
						}
					}
					Student::Outputs();
					break;
				default:
					cout<<"\nThis program is not available!!!"<<endl;
					break;
			}
    		cout<<"\nPress any key to return to the menu...\n";
			getch();
			break;			
		case 3:
			cout<<"\nYou have selected the function to sort by score...\n"<<endl;
			cout<<"\n\t\t\t\t********************************************";
   			cout<<"\n\t\t\t\t**               TYPE SORT                **";
  			cout<<"\n\t\t\t\t**                                        **";
	  		cout<<"\n\t\t\t\t**       1. A - Z                         **";
	  		cout<<"\n\t\t\t\t**       2. Z - A                         **";
	  		cout<<"\n\t\t\t\t**                                        **";
      		cout<<"\n\t\t\t\t********************************************";
      		int TypeSort3;
      		cout<<"\n\tEnter your selection: "; cin>>TypeSort3; cout<<endl;
			switch(TypeSort3){
				case 1:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getScore () > STD[j].getScore () ){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
							}
						}
					}
					Student::Outputs();
					break;
				case 2:
					for(int i=0; i<Size-1; i++){
    					for(int j=i+1; j<Size; j++){
    						if (STD[i].getScore () < STD[j].getScore () ){
    							Student temp = STD[i];
    							STD[i] = STD[j];
    							STD[j] = temp;
							}
						}
					}
					Student::Outputs();
					break;
				default:
					cout<<"\nThis program is not available!!!"<<endl;
					break;	
			}
    		cout<<"\nPress any key to return to the menu...\n";
			getch();
			break;
		default:
			cout<<"\nThis function is not available! Please choose again!!!"<<endl;
			break;
				
	}
}
void Student::Add(){
	int Num;
	cout<<"\nEnter the number of students to add: "; cin>>Num;
    Student *Temp = new Student [Size];
    for (int i=0; i<Size; i++){
    		Temp[i] = STD[i];
	}
	STD = new Student [Size*2+Num];
	for (int i=0; i<Size; i++){
    	STD[i] = Temp[i];
	}
	for(int i=0; i<Num; i++){
		cout<<"\n\tAdd information of student "<<Size+1<<":"<<endl;
		STD[Size].InputStudent();
		Size++;
	}  				
    cout<<"\nSuccessfully added."<<endl;
    delete [] Temp;
}
void Student::Delete(){
	string Erase;
	int Num2;
	cout<<"\nEnter the number of students to delete: "; cin>>Num2;
	for(int i=0; i<Num2; i++){
		cout<<"\n\tEnter code of student: "; fflush(stdin); getline (cin,Erase);
		for (int i=0; i<Size; i++){
    		if (Erase == STD[i].getCode()){
    			for (; i<Size-1; i++){
    				for(int j=i+1; j<Size; j++){
    					STD[i] = STD[j];
					}
				}
			}
		}
		cout<<"\nSuccessfully deleted."<<endl;
		Size = Size - 1;
	}
}

class Consultant:public Person{
	private:
		Consultant *C;
		int Lesson;
		string PhoneNumber, Charge;
		int NumberConsultants, Size2;
	public:
		Consultant();
		Consultant(int m);
		~Consultant();
		void InputConsultant();
		void Inputs();
		void Output();
		void Outputs();
		void Search();
		void Sort();
		void Add();
		void Delete();
};
Consultant::Consultant(){
	C = NULL;
	Lesson = 0;
	PhoneNumber = "";
	Charge = "";
	Size2 = 0;
	NumberConsultants = 0;
}
Consultant::Consultant(int m){
	C = new Consultant [m];
	Lesson = 0;
	PhoneNumber = "";
	Charge = "";
	Size2 = 0;
	NumberConsultants = 0;
}
Consultant::~Consultant(){
	delete [] C;
	Lesson = 0;
	PhoneNumber = "";
	Charge = "";
	Size2 = 0;
	NumberConsultants = 0;
}
void Consultant::InputConsultant(){
	Person::Inputs();
	cout<<"\tCharge of class: "; fflush(stdin); getline(cin,Charge);
	cout<<"\tLesson: "; cin>>Lesson;
	cout<<"\tPhone number: "; fflush(stdin); getline(cin,PhoneNumber);
}
void Consultant::Inputs(){
	cout<<"Enter the number of consultant: "; cin>>NumberConsultants;
	cout<<endl;
	C = new Consultant[NumberConsultants];
	for(int i=0; i<NumberConsultants; i++){
		cout<<"\n\tEnter information of consultant "<<i+1<<": "<<endl;
		C[i].InputConsultant();
		Size2++;
	}
}
void Consultant::Output(){
	Person::Outputs();
	cout<<Lesson<<"\t\t"<<PhoneNumber<<"\t\t\t"<<Charge<<"\t\t";
}
void Consultant::Outputs(){
	cout<<"\tSTT"<<"\t\tName"<<"\t\tSex"<<"\t\tDate"<<"\t\tAddress"<<"\t\tLesson"<<"\t\tPhoneNumber"<<"\t\tCharge"<<endl;
	for(int i=0; i<Size2; i++){				
		cout<<"\t"<<i+1;
		C[i].Output();
		cout<<endl;
	}
}
void Consultant::Search(){
	string SearchConsultant;
	cout<<"\n\tEnter name of consultant: "; fflush(stdin); getline (cin,SearchConsultant);
	cout<<"\n\t___Consultant found___\n"<<endl;
    cout<<"\tSTT"<<"\t\tName"<<"\t\tSex"<<"\t\tDate"<<"\t\tAddress"<<"\t\tLesson"<<"\t\tPhoneNumber"<<"\t\tCharge"<<endl;
    for (int i=0; i<Size2; i++){
   		if (SearchConsultant == C[i].getName()){
			cout<<"\t"<<i+1;
			C[i].Output();
			cout<<endl;
		}
	}
}
void Consultant::Sort(){
	for(int i=0; i<Size2-1; i++){
    	for(int j=i+1; j<Size2; j++){
    		if (C[i].getName() < C[j].getName()){
    			Consultant temp = C[i];
    			C[i] = C[j];
    			C[j] = temp;
    			cout<<endl;
			}
		}
	}
	Consultant::Outputs();
}
void Consultant::Add(){
	int AddNum;
	cout<<"\nEnter the number of Consultant to add: "; cin>>AddNum;
    Consultant *Temp = new Consultant [Size2];
    for (int i=0; i<Size2; i++){
    		Temp[i] = C[i];
	}
	C = new Consultant [Size2*2+AddNum];
	for (int i=0; i<Size2; i++){
    	C[i] = Temp[i];
	}
	for(int i=0; i<AddNum; i++){
		cout<<"\n\tAdd information of Consultant "<<Size2+1<<":"<<endl;
		C[Size2].InputConsultant();
		Size2++;
	}  				
    cout<<"\nSuccessfully added."<<endl;
    delete [] Temp;
}
void Consultant::Delete(){
	string DeleteConsultant;
	int DeleteNum;
	cout<<"\nEnter the number of students to delete: "; cin>>DeleteNum;
	for(int i=0; i<DeleteNum; i++){
		cout<<"\n\tEnter code of student: "; fflush(stdin); getline (cin,DeleteConsultant);
		for (int i=0; i<Size2; i++){
    		if (DeleteConsultant == C[i].getName()){
    			for (; i<Size2-1; i++){
    				for(int j=i+1; j<Size2; j++){
    					C[i] = C[j];
					}
				}
			}
		}
		cout<<"\nSuccessfully deleted."<<endl;
		Size2 = Size2 - 1;
	}
}

class Manage{
	private:
		Student s;
		Consultant c;
		Person *P;
	public:
		Manage();
		Manage(int m);
		~Manage();
		void M_InputList(int Program);
		void M_OutputList(int Program);
		void M_Add(int Program);
		void M_Search(int Program);
		void M_Sort(int Program);
		void M_Delete(int Program);
};
Manage::Manage(){
}

Manage::~Manage(){
}
void Manage::M_InputList(int Program){
    if(Program == 1){
		P = &s;
		P->Inputs();
	}else{
		P = &c;
		P->Inputs();
	}
}
void Manage::M_OutputList(int Program){
	if(Program == 1){
		P = &s;
		P->Outputs();
	}else{
		P = &c;
		P->Outputs();
	}
}
void Manage::M_Search(int Program){
	if(Program == 1){
		P = &s;
		P->Search();
	}else{
		P = &c;
		P->Search();
	}
}
void Manage::M_Sort(int Program){
	if(Program == 1){
		P = &s;
		P->Sort();
	}else{
		P = &c;
		P->Sort();
	}
}
void Manage::M_Add(int Program){
	if(Program == 1){
		P = &s;
		P->Add();
	}else{
		P = &c;
		P->Add();
	}
}
void Manage::M_Delete(int Program){
	if(Program == 1){
		P = &s;
		P->Delete();
	}else{
		P = &c;
		P->Delete();
	}
}

void MenuConsultant(){
	cout<<"\n\t\t\t\t*********************************************************";
    cout<<"\n\t\t\t\t**            CONSULTANT MANAGEMENT PROGRAM            **";
    cout<<"\n\t\t\t\t**                                                     **";
    cout<<"\n\t\t\t\t**  1. Enter consultant list                           **";
    cout<<"\n\t\t\t\t**  2. Show list                                       **";
   	cout<<"\n\t\t\t\t**  3. Search consultant                               **";
    cout<<"\n\t\t\t\t**  4. Sort consultant                                 **";
    cout<<"\n\t\t\t\t**  5. Add consultant                                  **";
    cout<<"\n\t\t\t\t**  6. Delete consultant                               **";
    cout<<"\n\t\t\t\t**  0. Exit                                            **";
    cout<<"\n\t\t\t\t**                                                     **";
    cout<<"\n\t\t\t\t*********************************************************";
}

void MenuStudent(){
	cout<<"\n\t\t\t\t*********************************************************";
    cout<<"\n\t\t\t\t**              STUDENT MANAGEMENT PROGRAM             **";
    cout<<"\n\t\t\t\t**                                                     **";
    cout<<"\n\t\t\t\t**  1. Enter student list                              **";
    cout<<"\n\t\t\t\t**  2. Show list                                       **";
   	cout<<"\n\t\t\t\t**  3. Search student                                  **";
    cout<<"\n\t\t\t\t**  4. Sort student                                    **";
    cout<<"\n\t\t\t\t**  5. Add student                                     **";
    cout<<"\n\t\t\t\t**  6. Delete student                                  **";
    cout<<"\n\t\t\t\t**  0. Exit                                            **";
    cout<<"\n\t\t\t\t**                                                     **";
    cout<<"\n\t\t\t\t*********************************************************";
}

void Menu(int Program){
	Manage M;
	while(true){
		if(Program == 1){
			MenuStudent();
		}else{
			MenuConsultant();
		}
    	int choose;
    	cout<<"\n\tEnter your selection: "; cin>>choose;
    	switch(choose){
    		case 1:
    			cout<<"\nYou have selected the add list function...\n"<<endl;
    			M.M_InputList(Program);
    			cout<<"\nSuccessfully entered."<<endl;				
				cout<<"\nPress any key to return to the menu...\n";
				getch();
				break;
			case 2:
				cout<<"\nYou have selected the list display function..."<<endl<<endl;
				M.M_OutputList(Program);
				cout<<"\nPress any key to return to the menu...\n";
				getch();
				break;
			case 3:
				cout<<"\nYou have selected the search function..."<<endl;
				M.M_Search(Program);
				cout<<"\nPress any key to return to the menu...\n";
				getch();
				break;
			case 4:
				cout<<"\nYou have selected the sort function..."<<endl;
				M.M_Sort(Program);
				break;
			case 5:
				cout<<"\nYou have selected the add function..."<<endl;
				M.M_Add(Program);
				cout<<"\nPress any key to return to the menu...\n";
				getch();
				break;
			case 6:
				cout<<"\nYou have selected the delete function..."<<endl;
				M.M_Delete(Program);
				cout<<"\nPress any key to return to the menu...\n";
				getch();
				break;
			case 0:
				cout<<"\nYou have selected an exit program!!!"<<endl;
				return ;
			default:
				cout<<"\nThis program is not available! Please choose again!!!"<<endl;
				cout<<"\nPress any key to return to the menu.\n";
				getch();
				break;		
		}
	}
}

int main(){
	system("color A");
	int Program;
	while(true){
		cout<<"\n\t\t\t\t*************************************************";
    	cout<<"\n\t\t\t\t**              MANAGEMENT PROGRAM             **";
   		cout<<"\n\t\t\t\t**                                             **";
    	cout<<"\n\t\t\t\t**        1. Student                           **";
    	cout<<"\n\t\t\t\t**        2. Consultant                        **";
    	cout<<"\n\t\t\t\t**        0. Exit                              **";
    	cout<<"\n\t\t\t\t**                                             **";
    	cout<<"\n\t\t\t\t*************************************************";
    	cout<<"\n\tEnter your selection: "; cin>>Program;
    	switch(Program){
    		case 1:
    			Menu(Program);
    			system("pause");
    			break;
    		case 2:
    			Menu(Program);
    			system("pause");
    			break;
    		case 0:
    			return 0;
    		default:
    			cout<<"\nThis program is not available! Please choose again!!!"<<endl;
				system("pause");
				break;
		}
	}
}
